openapi: "3.0.0"
info:
  version: "0.0.0"
  title: "Scryfall API Documentation"
  description: "Scryfall provides a REST-like API for ingesting our card data programatically. The API exposes information available on the regular site in easy-to-consume formats."
servers:
  - url: "https://api.scryfall.com"
tags:
  - name: sets
    description: "A Set object represents a group of related Magic cards. All Card objects on Scryfall belong to exactly one set."
  - name: cards
    description: "Card objects represent individual Magic: The Gathering cards that players could obtain and add to their collection (with a few minor exceptions)."
  - name: rulings
    description: "Rulings represent Oracle rulings, Wizards of the Coast set release notes, or Scryfall notes for a particular card.If two cards have the same name, they will have the same set of rulings objects. If a card has rulings, it usually has more than one.Rulings with a scryfall source have been added by the Scryfall team, either to provide additional context for the card, or explain how the card works in an unofficial format (such as Duel Commander)."
  - name: card symbols
    description: "A Card Symbol object represents an illustrated symbol that may appear in card’s mana cost or Oracle text. Symbols are based on the notation used in the Comprehensive Rules."
  - name: catalog
    description: "A Catalog object contains an array of Magic datapoints (words, card values, etc). Catalog objects are provided by the API as aids for building other Magic software and understanding possible values for a field on Card objects."
  - name: bulk data
    description: "Scryfall provides daily exports of our card data in bulk files. Each of these files is represented as a bulk_data object via the API. URLs for files change their timestamp each day, and can be fetched programmatically."
  - name: application
    description: "OAuth and registered API applications are currently in private beta. Public registration for applications is not currently available.Some Scryfall API methods are restricted to valid applications, and registered applications receive increased API limits.In addition, your application can implement an OAuth workflow that allows people with Scryfall accounts to grant your application programatic access to their data."
paths:
  /sets:
    $ref: './paths/sets.yaml'
  /sets/{code}:
    $ref: './paths/sets_code.yaml'
  /sets/tcgplayer/{id}:
    get:
      tags:
        - sets
      summary: "Returns a Set with the given tcgplayer_id, also known as the groupId on TCGplayer’s API."
      parameters:
        - name: id
          in: path
          required: true
          description: "The tcgplayer_id or groupId."
          schema:
            type: integer
        - $ref: '#/components/parameters/formatJson'
        - $ref: '#/components/parameters/prettyJson'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/set'
        default:
          $ref: '#/components/responses/default'
  /sets/{id}:
    get:
      tags:
        - sets
      summary: "Returns a Set with the given Scryfall id."
      parameters:
        - name: id
          in: path
          required: true
          description: "The Scryfall ID."
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/formatJson'
        - $ref: '#/components/parameters/prettyJson'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/set'
        default:
          $ref: '#/components/responses/default'
  /cards/search:
    get:
      tags:
        - cards
      summary: "Returns a List object containing Cards found using a fulltext search string. This string supports the same fulltext search system that the main site uses. This method is paginated, returning 175 cards at a time. Review the documentation for paginating the List type and and the Error type type to understand all of the possible output from this method. If only one card is found, this method will still return a List." #TODO: this section had a lot of extra info to add
      parameters:
      - name: q
        in: query
        required: true
        description: "A fulltext search query. Make sure that your parameter is properly encoded."
        schema:
          type: string
      - name: unique
        in: query
        description: "The strategy for omitting similar cards. See below."
        schema:
          type: string
      - name: dir
        in: query
        description: "The direction to sort cards. See below."
        schema:
          type: string
      - name: include_extras
        in: query
        description: "If true, extra cards (tokens, planes, etc) will be included. Equivalent to adding include:extras to the fulltext search. Defaults to false."
        schema:
          type: boolean
      - name: include_multilingual
        in: query
        description: "If true, cards in every language supported by Scryfall will be included. Defaults to false."
        schema:
          type: boolean
      - name: include_variations
        in: query
        description: "If true, rare care variants will be included, like the Hairy Runesword. Defaults to false."
        schema:
          type: boolean
      - name: page
        in: query
        description: "The page number to return"
        schema:
          type: integer
          default: 1
      - $ref: '#/components/parameters/formatJson'
      - $ref: '#/components/parameters/prettyJson'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_list'
        default:
          $ref: '#/components/responses/default'
  /cards/named: #TODO: add extra help text
    get:
      tags:
        - cards
      summary: "Returns a single random Card object"
      parameters:
      - name: exact
        in: query
        description: "The exact card name to search for, case insenstive."
        required: true
        schema:
          type: string
      - name: fuzzy
        in: query
        description: "A fuzzy card name to search for."
        required: true
        schema:
          type: string
      - name: set
        in: query
        description: "A set code to limit the search to one set."
        schema:
          type: string
      - name: format
        in: query
        description: "The data format to return: \"json\", \"text\", or \"image\""
        schema:
          type: string
          default: "json"
      - name: face
        in: query
        description: "If using the image format and this parameter has the value \"back\", the back face of the card will be returned. Will return a 422 if this card has no back face."
        schema:
          type: string
      - name: version
        in: query
        description: "The image version to return when using the image format: \"small\", \"normal\", \"large\", \"png\", \"art_crop\", or \"border_crop\". Defaults to \"large\""
        schema:
          type: string
      - $ref: '#/components/parameters/prettyJson'
      responses:
        200:
          description: success
          content:
            application/json: #TODO: add other formats from above: text and image
              schema:
                $ref: '#/components/schemas/card'
        default:
          $ref: '#/components/responses/default'
  /cards/autocomplete:
    get:
      tags:
        - cards
      summary: "Returns a Catalog object containing up to 20 full English card names that could be autocompletions of the given string parameter. This method is designed for creating assistive UI elements that allow users to free-type card names. The names are sorted with the nearest match first, highly favoring results that begin with your given string. Spaces, punctuation, and capitalization are ignored. If q is less than 2 characters long, or if no names match, the Catalog will contain 0 items (instead of returning any errors)."
      parameters:
      - name: q
        in: query
        description: "The string to autocomplete."
        required: true
        schema:
          type: string
      - name: include_extras
        in: query
        description: "If true, extra cards (tokens, planes, vanguards, etc) will be included."
        schema:
          type: boolean
          default: false
      - $ref: '#/components/parameters/formatJson'
      - $ref: '#/components/parameters/prettyJson'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog'
        default:
          $ref: '#/components/responses/default'
  /cards/random:
    get:
      tags:
        - cards
      summary: "Returns a single random Card object. The optional parameter q supports the same fulltext search system that the main site uses. Providing q will filter the pool of cards before returning a random entry."
      parameters:
        - name: q
          in: query
          description: "An optional fulltext search query to filter the pool of random cards. Make sure that your parameter is properly encoded."
          schema:
            type: string
        - name: format
          in: query
          description: "The data format to return json, text, or image. Defaults to json."
          schema:
            type: string
        - name: face
          in: query
          description: "If using the image format and this parameter has the value back, the back face of the card will be returned. Will return a 422 if this card has no back face."
          schema:
            type: string
        - name: version
          in: query
          description: "The image version to return when using the image format small, normal, large, png, art_crop, or border_crop. Defaults to large."
          schema:
            type: string
        - $ref: '#/components/parameters/prettyJson'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card'
        default:
          $ref: '#/components/responses/default'
  /cards/collection:
    post:
      tags:
        - cards
      summary: "Accepts a JSON array of card identifiers, and returns a List object with the collection of requested cards. A maximum of 75 card references may be submitted per request. The request must be posted with Content-Type as application/json." #TODO: add card identifiers and double check post and post schema
      requestBody:
        description: "An object with an array of JSON objects, each one a card identifier."
        content:
          application/json:
            schema:
              type: string
      parameters:
        - $ref: '#/components/parameters/prettyJson'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post_card_list'
        default:
          $ref: '#/components/responses/default'
  /cards/{code}/{number}/{lang}:
    get:
      tags:
        - cards
      summary: "Returns a single card with the given set code and collector number. You may optionally also append a lang part to the URL to retrieve a non-English version of the card."
      parameters:
        - name: code
          in: path
          description: "The three to five-letter set code."
          required: true
          schema:
            type: string
        - name: number
          in: path
          description: "The collector number."
          required: true
          schema:
            type: string
        - name: lang
          in: path
          description: "The 2-3 character language code."
          required: true
          schema:
            type: string #TODO: language data type
        - $ref: '#/components/parameters/formatMulti'
        - $ref: '#/components/parameters/face'
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/prettyJson'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card'
        default:
          $ref: '#/components/responses/default'
  /cards/multiverse/id:
    get:
      tags:
        - cards
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /cards/mtgo/id:
    get:
      tags:
        - cards
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /cards/arena/id:
    get:
      tags:
        - cards
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /cards/tcgplayer/id:
    get:
      tags:
        - cards
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /cards/cardmarket/id:
    get:
      tags:
        - cards
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /cards/id:
    get:
      tags:
        - cards
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /cards/multiverse/id/rulings:
    get:
      tags:
        - rulings
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /cards/mtgo/id/rulings:
    get:
      tags:
        - rulings
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /cards/arena/id/rulings:
    get:
      tags:
        - rulings
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /cards/code/number/rulings:
    get:
      tags:
        - rulings
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /cards/id/rulings:
    get:
      tags:
        - rulings
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /symbology:
    get:
      tags:
        - card symbols
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /symbology/parse-mana:
    get:
      tags:
        - card symbols
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/card-names:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/artist-names:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/word-bank:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/creature-types:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/planeswalker-types:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/land-types:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/artifact-types:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/enchantment-types:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/spell-types:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/powers:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/touighnesses:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/loyalties:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/watermarks:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/keyword-abilities:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/ketword-actions:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /catalog/ability-words:
    get:
      tags:
        - catalog
      summary: "Returns a single random Card object"
      responses:
        200:
          description: success
  /bulk-data:
    get:
      tags:
        - bulk data
      summary: ""
      responses:
        200:
          description: success
  /bulk-data/id:
    get:
      tags:
        - bulk data
      summary: ""
      responses:
        200:
          description: success
  /bulk-data/type:
    get:
      tags:
        - bulk data
      summary: ""
      responses:
        200:
          description: success
  /account:
    get:
      tags:
        - application
      summary: ""
      responses:
        200:
          description: success
  /application:
    get:
      tags:
        - application
      summary: ""
      responses:
        200:
          description: success
  /oauth/convert:
    get:
      tags:
        - application
      summary: ""
      responses:
        200:
          description: success
  /oauth/downgrade:
    get:
      tags:
        - application
      summary: ""
      responses:
        200:
          description: success
  /oauth/revoke:
    get:
      tags:
        - application
      summary: ""
      responses:
        200:
          description: success
components:
  schemas:
    error:
      $ref: './schemas/error.yaml'
    list:
      $ref: './schemas/list.yaml'
    set:
      $ref: './schemas/set.yaml'
    ruling:
      $ref: './schemas/ruling.yaml'
    card_symbol:
      $ref: './schemas/card_symbol.yaml'
    catalog:
      $ref: './schemas/catalog.yaml'
    bulk_data:
      $ref: './schemas/bulk_data.yaml'
    card:
      $ref: './schemas/card.yaml'
    card_face:
      $ref: './schemas/card_face.yaml'
    related_card:
      $ref: './schemas/related_card.yaml'
    card_list:
      $ref: './schemas/card_list.yaml'
    post_card_list:
      $ref: './post_card_list.yaml'
    set_list:
      $ref: './schemas/set_list.yaml'
    ruling_list:
      $ref: './schemas/ruling_list.yaml'
    card_symbol_list:
      $ref: './schemas/card_symbol_list.yaml'
    bulk_data_list:
      $ref: './schemas/bulk_data_list.yaml'
    color_array:
      $ref: './schemas/color_array.yaml'
    legalities:
      $ref: './schemas/legalities.yaml'
    legalities_values:
      $ref: './schemas/legalities_values.yaml'
    image_uris:
      $ref: './schemas/image_uris.yaml'
    prices:
      $ref: './schemas/prices.yaml'
    related_uris:
      $ref: './schemas/related_uris.yaml'
    purchase_uris:
      $ref: './schemas/purchase_uris.yaml'
    set_types:
      $ref: './schemas/set_types.yaml'
    #The following are properties resused for the List Object
    object_list:
      $ref: './schemas/object_list.yaml'
    has_more:
      $ref: './schemas/has_more.yaml'
    next_page:
      $ref: './schemas/next_page.yaml'
    total_cards:
      $ref: './schemas/total_cards.yaml'
    warnings:
      $ref: './schemas/warnings.yaml'

  parameters:
    formatJson:
      $ref: './parameters/format_json.yaml'
    prettyJson:
      $ref: './parameters/pretty_json.yaml'
    formatMulti:
      $ref: './parameters/format_multi.yaml'
    face:
      $ref: './parameters/face.yaml'
    version:
      $ref: './parameters/version.yaml'
  responses:
    default:
      $ref: './responses/error.yaml'
